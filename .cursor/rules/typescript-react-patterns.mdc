---
alwaysApply: false
---

# TypeScript and React Patterns

## Component Structure

- Use functional components with TypeScript interfaces for props
- Export components as named exports (not default exports)
- Use React.FC type or explicit return types for components

## File Organization

- Each exercise component should be in its own directory
- Use `component.tsx` for the main component file
- Use `component.module.css` for component-specific styles
- Use `page.tsx` for the page that displays the component

## Props Interface Pattern

```typescript
interface ComponentNameProps {
  // props here
}

export function ComponentName({ prop1, prop2 }: ComponentNameProps) {
  // component logic
}
```

## CSS Modules

- Import CSS modules as `styles` from `./component.module.css`
- Use `className={styles.className}` for styling
- Keep CSS module files co-located with components

## Path Aliases

- Use `@/` prefix for imports from the root directory
- Example: `import { Component } from "@/app/components/Component"`

## Exercise Display Pattern

All exercise pages should use the ExerciseDisplay component:

```typescript
import { ExerciseDisplay } from "../../components/ExerciseDisplay";
import { ComponentName } from "./component";

export default function ComponentNamePage() {
  return (
    <ExerciseDisplay
      title="Component Name"
      description="Description of the animation"
      courseUrl="https://animations.dev/learn/..."
    >
      <ComponentName />
    </ExerciseDisplay>
  );
}
```

# TypeScript and React Patterns

## Component Structure

- Use functional components with TypeScript interfaces for props
- Export components as named exports (not default exports)
- Use React.FC type or explicit return types for components

## File Organization

- Each exercise component should be in its own directory
- Use `component.tsx` for the main component file
- Use `component.module.css` for component-specific styles
- Use `page.tsx` for the page that displays the component

## Props Interface Pattern

```typescript
interface ComponentNameProps {
  // props here
}

export function ComponentName({ prop1, prop2 }: ComponentNameProps) {
  // component logic
}
```

## CSS Modules

- Import CSS modules as `styles` from `./component.module.css`
- Use `className={styles.className}` for styling
- Keep CSS module files co-located with components

## Path Aliases

- Use `@/` prefix for imports from the root directory
- Example: `import { Component } from "@/app/components/Component"`

## Exercise Display Pattern

All exercise pages should use the ExerciseDisplay component:

```typescript
import { ExerciseDisplay } from "../../components/ExerciseDisplay";
import { ComponentName } from "./component";

export default function ComponentNamePage() {
  return (
    <ExerciseDisplay
      title="Component Name"
      description="Description of the animation"
      courseUrl="https://animations.dev/learn/..."
    >
      <ComponentName />
    </ExerciseDisplay>
  );
}
```
